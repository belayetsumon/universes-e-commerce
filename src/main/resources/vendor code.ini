Use in Security Annotations
@PreAuthorize("@vendorRoleChecker.hasVendorRole(authentication, 'ADMIN')")
@GetMapping("/vendor/dashboard")
public String vendorDashboard() {
    return "Only vendor-specific admins can access this dashboard.";
}
##########################################################################################
How to Let User Switch Vendors?
@PostMapping("/switch-vendor")
public String switchVendor(@RequestParam Long vendorId) {
    Vendor vendor = vendorRepo.findById(vendorId).orElseThrow();
    userContext.setActiveVendor(vendor);
    return "redirect:/vendor/dashboard";
}
#######################################################################################

Bonus: Assign Roles per Vendor (Admin Panel)

@PostMapping("/vendors/{vendorId}/assign-role")
public ResponseEntity<String> assignRole(@RequestParam Long userId,
                                         @PathVariable Long vendorId,
                                         @RequestParam Long roleId) {
    AppUser user = userRepo.findById(userId).orElseThrow();
    Vendor vendor = vendorRepo.findById(vendorId).orElseThrow();
    Role role = roleRepo.findById(roleId).orElseThrow();

    UserVendorRole uvr = new UserVendorRole();
    uvr.setUser(user);
    uvr.setVendor(vendor);
    uvr.setRole(role);
    userVendorRoleRepo.save(uvr);

    return ResponseEntity.ok("Assigned");
}
#############################################################################################

Add Method to Assign Existing User to New Vendor

@PostMapping("/assign-existing")
@PreAuthorize("@vendorRoleChecker.hasVendorRole(authentication, 'ADMIN')")
public String assignExistingUserToVendor(@RequestParam String username,
                                         @RequestParam Long roleId) {
    Vendor vendor = userContext.getActiveVendor();

    AppUser user = userRepo.findByUsername(username)
        .orElseThrow(() -> new RuntimeException("User not found"));

    boolean alreadyAssigned = userVendorRoleRepo
        .existsByUser_IdAndVendor_Id(user.getId(), vendor.getId());

    if (alreadyAssigned) {
        throw new RuntimeException("User already assigned to this vendor");
    }

    Role role = roleRepo.findById(roleId).orElseThrow();

    UserVendorRole uvr = new UserVendorRole();
    uvr.setUser(user);
    uvr.setVendor(vendor);
    uvr.setRole(role);
    userVendorRoleRepo.save(uvr);

    return "redirect:/vendor/users";
}
<form method="post" th:action="@{/vendor/users/assign-existing}">
    <input type="text" name="username" placeholder="Existing Username" required />

    <select name="roleId">
        <option th:each="role : ${assignableRoles}"
                th:value="${role.id}"
                th:text="${role.name}">Role</option>
    </select>

    <button type="submit">Assign User</button>
</form>
###################################

 2. Vendor Switch Endpoint

@Controller
@RequestMapping("/vendor")
public class VendorController {

    @Autowired private VendorRepository vendorRepo;
    @Autowired private UserContext userContext;

    @PostMapping("/switch")
    public String switchVendor(@RequestParam Long vendorId) {
        Vendor vendor = vendorRepo.findById(vendorId)
            .orElseThrow(() -> new RuntimeException("Vendor not found"));

        // Check if the user has access to this vendor
        String username = SecurityContextHolder.getContext().getAuthentication().getName();
        boolean allowed = userVendorRoleRepo.existsByUser_UsernameAndVendor_Id(username, vendorId);

        if (!allowed) {
            throw new AccessDeniedException("You are not allowed to access this vendor");
        }

        userContext.setActiveVendor(vendor);

        return "redirect:/dashboard"; // or anywhere
    }
}

<form method="post" th:action="@{/vendor/switch}">
    <select name="vendorId">
        <option th:each="vendor : ${userVendors}"
                th:value="${vendor.id}"
                th:text="${vendor.name}">Vendor</option>
    </select>
    <button type="submit">Switch</button>
</form>
######################################################################################

Accessing Active Vendor in Any Service

@Service
public class ProductService {
    @Autowired private UserContext userContext;

    public List<Product> getVendorProducts() {
        Long vendorId = userContext.getVendorId();
        return productRepo.findByVendorId(vendorId);
    }
}
##################################################################################################

@Controller
@RequestMapping("/vendor")
public class VendorSwitchController {

    private final VendorUserContext vendorUserContext;
    private final VendorprofileRepository vendorRepo;
    private final UserVendorRoleRepository userVendorRoleRepo;

    public VendorSwitchController(VendorUserContext vendorUserContext,
                                  VendorprofileRepository vendorRepo,
                                  UserVendorRoleRepository userVendorRoleRepo) {
        this.vendorUserContext = vendorUserContext;
        this.vendorRepo = vendorRepo;
        this.userVendorRoleRepo = userVendorRoleRepo;
    }

    @GetMapping("/{vendorId}/switch")
    public String switchVendor(@PathVariable Long vendorId) {

        // 1️⃣ Load the vendor
        Vendorprofile vendor = vendorRepo.findById(vendorId)
            .orElseThrow(() -> new RuntimeException("Vendor not found"));

        // 2️⃣ Get the current user (assuming your principal is Users)
        Users user = (Users) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        // 3️⃣ Find user’s roles for this vendor
        List<UserVendorRole> vendorRoles = userVendorRoleRepo.findByUsers_IdAndVendor_Id(user.getId(), vendorId);

        if (vendorRoles.isEmpty()) {
            throw new AccessDeniedException("You do not have any roles for this vendor");
        }

        // 4️⃣ Store vendor in context
        vendorUserContext.setActiveVendor(vendor);

        // 5️⃣ Update SecurityContext with vendor-specific roles
        List<String> roles = vendorRoles.stream()
            .map(r -> "ROLE_VENDOR_" + r.getVendorRole().getName().toUpperCase())
            .toList();

        updateVendorRolesForCurrentUser(roles);

        return "redirect:/vendor/dashboard";
    }
}
##########################################################################################################
public void updateVendorRolesForCurrentUser(List<String> newRoles) {
    Authentication currentAuth = SecurityContextHolder.getContext().getAuthentication();

    List<GrantedAuthority> updatedAuthorities = new ArrayList<>();

    // Add any global roles you want to keep
    currentAuth.getAuthorities().stream()
        .filter(auth -> !auth.getAuthority().startsWith("ROLE_VENDOR_"))
        .forEach(updatedAuthorities::add);

    // Add vendor-specific roles
    for (String role : newRoles) {
        updatedAuthorities.add(new SimpleGrantedAuthority(role));
    }

    Authentication newAuth = new UsernamePasswordAuthenticationToken(
            currentAuth.getPrincipal(),
            currentAuth.getCredentials(),
            updatedAuthorities
    );

    SecurityContextHolder.getContext().setAuthentication(newAuth);
}